<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[Spring-data JPA 注解详解]]></title>
      <url>http://yoursite.com/2017/05/08/spring-data-jpa/</url>
      <content type="html"><![CDATA[<h1 id="基本属性"><a href="#基本属性" class="headerlink" title="基本属性"></a>基本属性</h1><h2 id="Id-and-GeneratedValue"><a href="#Id-and-GeneratedValue" class="headerlink" title="@Id and @GeneratedValue"></a>@Id and @GeneratedValue</h2><p><code>@Id</code> 标注应用于实体类的属性或者属性对应的<code>getter</code>方法，表示该属性映射为数据库表的主键。     </p>
<p><code>@GeneratedValue</code>与<code>@Id</code>一同使用，表示主键的生成策略，通过strategy属性指定。<br>在<code>javax.persistence.GenerationType</code>定义了如下几种策略：</p>
<ul>
<li><code>IDENTITY</code>：采用数据库<code>ID</code>自增长的方式产生主键，<code>Oracle</code>不支持这种方式。     </li>
<li><code>AUTO</code>： JPA自动选择合适的策略，是默认选项。     </li>
<li><code>SEQUENCE</code>：通过序列产生主键，通过<code>@SequenceGenerator</code>标注指定序列名，MySQL不支持这种方式。   </li>
<li><p><code>TABLE</code>：通过表产生主键，框架借由表模拟序列产生主键，使用该策略更易于做数据库移植。     </p>
<h2 id="Column"><a href="#Column" class="headerlink" title="@Column"></a>@Column</h2><p>@Column注解来标识实体类中属性与数据表中字段的对应关系，一共10个属性，并且这10个属性均是可选属性。详细内容如下：    </p>
</li>
<li><p><code>name</code>：表示数据库表中该字段的名称，默认情形属性名称一致。       </p>
</li>
<li><code>nullable</code>：表示该字段是否允许为<code>null</code>，默认为<code>true</code>。      </li>
<li><code>unique</code>：表示该字段是否是唯一标识，默认为<code>false</code>。         </li>
<li><code>length</code>：表示该字段的大小，仅对<code>String</code>类型的字段有效。      </li>
<li><code>insertable</code>：表示在<code>ORM</code>框架执行插入操作时，该字段是否应出现<code>INSETRT</code>语句中，默认为<code>true</code>。        </li>
<li><code>updateable</code>：表示在ORM框架执行更新操作时，该字段是否应该出现在<code>UPDATE</code>语句中，默认为<code>true</code>。对于一经创建就不能更改的字段，该属性非常有用，比如<code>email</code>属性。               </li>
<li><code>columnDefinition</code>：表示该字段在数据库中的实际类型。通常ORM框架可以根据属性类型自动判断数据库中字段的类型，但是依然有些例外：<br>  ①<code>Date</code>类型无法确定数据库中字段类型究竟是<code>DATE</code>、<code>TIME</code>还是<code>TIMESTAMP</code><br>  ②<code>String</code>的默认映射类型为<code>VARCHAR</code>，如果希望将<code>String</code>类型映射到特定数据库的<code>BLOB</code>或<code>TEXT</code>字段类型，则需要进行设置</li>
<li><code>table</code>：表示包含当前字段的表名，很少使用      </li>
<li><code>precision</code>和<code>scale</code>：表示精度，当字段类型为<code>double</code>时，<code>precision</code>表示数值的总长度，<code>scale</code>表示小数所占位数。</li>
</ul>
<p>由于上面的<code>insertable</code>和<code>updateable</code>是一样的性质，这里只是对<code>insertable</code>做说明，<br>当以这种方式向数据库插入数据时(000003000002,lili,产品,23)：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Id</span></span><br><span class="line"><span class="keyword">private</span> String id;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> String intro;</span><br><span class="line"><span class="meta">@Column</span>(insertable = <span class="keyword">false</span>)</span><br><span class="line"><span class="keyword">private</span> String age;</span><br></pre></td></tr></table></figure>
<p>当查询数据库时，显示的确是这样：        </p>
<table>
<thead>
<tr>
<th>id</th>
<th>age</th>
<th>intro</th>
<th>name</th>
<th>businesses_id</th>
</tr>
</thead>
<tbody>
<tr>
<td>000003000002</td>
<td>null</td>
<td>产品</td>
<td>lili</td>
<td>000003</td>
</tr>
</tbody>
</table>
<p>正如上面看到的那样，如果添加了<code>@Column(insertable = false)</code>,那么在插入数据的时候，将不会被写入数据库</p>
<h2 id="Basic和-Transient"><a href="#Basic和-Transient" class="headerlink" title="@Basic和@Transient"></a>@Basic和@Transient</h2><p><code>@Basic</code>表示属性到数据库表的字段的映射。<br><code>@Basic</code>有两个常用属性：      </p>
<ul>
<li><code>fetch</code>: 表示实体类对应属性的读取策略，有<code>EAGER</code>和<code>LAZY</code>两种取值，分别表示主动抓取和延迟加载，默认值为<code>EAGER</code>。        </li>
<li><code>optional</code>:表示该属性是否允许为<code>null</code>，默认值为<code>true</code>。</li>
</ul>
<p><code>@Transient</code>表示该属性并非一个到数据库表的字段的映射，JPA将忽略该属性。<br>如果一个属性并非数据库表的字段映射，就务必将其标注为<code>@Transient</code>，否则JPA默认其注解为<code>@Basic</code>。</p>
<h2 id="Temporal"><a href="#Temporal" class="headerlink" title="@Temporal"></a>@Temporal</h2><p>在数据库中，表示时间类型的数据有 <code>DATE</code>，<code>TIME</code>，和 <code>TIMESTAMP</code> 三种精度 ( 即单纯的日期，时间，或者两者兼备 )。 可使用<code>@Temporal</code>来设置<code>Date</code>类型的属性映射到对应精度的字段。</p>
<ul>
<li><code>@Temporal(TemporalType.DATE)</code>映射为日期 // date （只有日期）      </li>
<li><code>@Temporal(TemporalType.TIME)</code>映射为日期 // time （是有时间）      </li>
<li><code>@Temporal(TemporalType.TIMESTAMP)</code>映射为日期 // date time （日期+时间）</li>
</ul>
<h2 id="Lob"><a href="#Lob" class="headerlink" title="@Lob"></a>@Lob</h2><p><code>@Lob</code>标注表示将属性映射成数据库支持的大对象类型，<code>Clob</code>或者<code>Blog</code>。其中：</p>
<ul>
<li><code>Clob（Character Large Ojects）</code>类型是长字符串类型，<code>java.sql.Clob</code>、<code>Character[]</code>、<code>char[]</code> 和 <code>String</code> 将被映射为 <code>Clob</code> 类型。     </li>
<li><code>Blob（Binary Large Objects）</code>类型是字节类型，<code>java.sql.Blob</code>、<code>Byte[]</code>、<code>byte[]</code> 和 实现了<code>Serializable</code>接口的类型将被映射为<code>Blob</code> 类型。</li>
</ul>
<p>因为这两种类型的数据一般占用的内存空间比较大，所以通常使用延迟加载的方式，与<code>@Basic</code>标注同时使用，设置加载方式为<code>FetchType.LAZY</code>。</p>
<h1 id="FetchType（加载类型）"><a href="#FetchType（加载类型）" class="headerlink" title="FetchType（加载类型）"></a>FetchType（加载类型）</h1><p>##FetchType.EAGER<br>饥饿加载，查询实体A时，会查询关联表B。加载默认使用的就是这种方式，但是需要注意的一点就是，使用这种加载方式，需要有<code>get()</code>方法才能返回正常的数据，换句话说，如果我们想控制不加载某个属性，只需要去掉<code>get()</code>方法就可以了。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//public void setLottery(B b) &#123;</span></span><br><span class="line"><span class="comment">//       this.b = b;</span></span><br><span class="line"><span class="comment">//   &#125;</span></span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> B <span class="title">getLottery</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> b;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<h2 id="FetchType-LAZY"><a href="#FetchType-LAZY" class="headerlink" title="FetchType.LAZY"></a>FetchType.LAZY</h2><p>延迟加载，一般用于关联表的查询，查询A实体时，不查询关联B实体。如果写入<code>get()</code>方法，并使用<code>FetchType.LAZY</code>,那么会抛出<code>org.springframework.http.converter.HttpMessageNotWritableException</code>异常，这是由于使用<code>FetchType.LAZY</code>方式时，<code>get()</code>方法返回的并不是一个常规的对象，而是一个<code>JavassistLazyInitializer</code>，从而不能写入JSON文档，那么解决办法就是忽略json，所以需要添加一个<code>@JsonIgnore</code>的注解。当然，如果不写注解，只需要去掉<code>get()</code>方法，也不会这个问题。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">@Entity</span><br><span class="line">public class A implements Serializable&#123;</span><br><span class="line">    @Id</span><br><span class="line">    @Column(unique = true,nullable = false,length = 20)</span><br><span class="line">    private String id;   //奖品id(奖品编号)</span><br><span class="line">    @Column(nullable = false,length = 40)</span><br><span class="line">    private String name; //奖品名称</span><br><span class="line">    @Column(nullable = false,length = 20)</span><br><span class="line">    private String num;  //奖品数量</span><br><span class="line"></span><br><span class="line">    @ManyToOne(fetch = FetchType.LAZY)</span><br><span class="line">    @JsonIgnore</span><br><span class="line">    private B b;</span><br><span class="line"></span><br><span class="line">    //忽略部分get，set方法</span><br><span class="line"></span><br><span class="line">    public void setLottery(B b) &#123;</span><br><span class="line">        this.b = b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public B getLottery() &#123;</span><br><span class="line">        return b;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h1 id="实体类关系"><a href="#实体类关系" class="headerlink" title="实体类关系"></a>实体类关系</h1><p>JPA<code>@OneToOne</code>、<code>@ManyToOne</code>、<code>OneToMany</code>和<code>@ManyToMany</code>几个标注提供用以定义实体类之间的关系。</p>
<h2 id="OneToOne-一对一"><a href="#OneToOne-一对一" class="headerlink" title="OneToOne(一对一)"></a>OneToOne(一对一)</h2><p>一对一的属性：</p>
<ul>
<li><code>targetEntity</code>属性表示默认关联的实体类型，默认为当前标注的实体类，绝大数据情况下不需要进行设置。</li>
<li><code>cascade</code>属性表示级联操作策略：<ol>
<li>不定义,则对关系表不会产生任何影响</li>
<li><code>CascadeType.PERSIST</code>:级联新建</li>
<li><code>CascadeType.REMOVE</code>:级联删除</li>
<li><code>CascadeType.REFRESH</code>: 级联刷新，即重新同步到数据库中状态，会覆盖掉已经修改但是还没保存的实体类属性</li>
<li><code>CascadeType.MERGE</code>: 级联更新</li>
<li><code>CascadeType.ALL</code>:表示选择全部四项</li>
</ol>
</li>
<li><code>fetch</code>属性表示实体的加载方式，有<code>LAZY</code>和<code>EAGER</code>两种取值，默认值为<code>EAGER</code>    </li>
<li><code>optional</code>属性表示关联的实体是否能够存在<code>null</code>值，默认为<code>true</code>，表示可以存在<code>null</code>值<br>关于<code>fetch</code>属性，所有<code>@XXXToOne</code>，默认值为<code>EAGER</code>，所有<code>@XXXToMany</code>，默认值为<code>LAZY</code>。</li>
</ul>
<h2 id="JoinColumn"><a href="#JoinColumn" class="headerlink" title="@JoinColumn"></a>@JoinColumn</h2><p>如果使用了<code>@OnetoOne</code>标注，对于表中的字段，会自动映射生成字段名，并且按照如下方式：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">关联表的名称 + &quot;_&quot; + 关联表主键的字段名</span><br></pre></td></tr></table></figure></p>
<p>比如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@Id</span><br><span class="line">private String id;</span><br><span class="line"></span><br><span class="line">private String name;</span><br><span class="line">private String intro;</span><br><span class="line">private String age;</span><br><span class="line"></span><br><span class="line">@OneToOne</span><br><span class="line">private B b;</span><br></pre></td></tr></table></figure>
<p>那么<code>User</code>表中的自定生成的字段名就为：<code>b_id</code></p>
<p>如果对应的字段名是其他名字，则可以通过@JoinColumn来定义外键关联的字段名称。比如如果字段名为blog_Id的话，可以这样定义：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@Id</span><br><span class="line">private String id;</span><br><span class="line"></span><br><span class="line">private String name;</span><br><span class="line">private String intro;</span><br><span class="line">private String age;</span><br><span class="line"></span><br><span class="line">@OneToOne(name = &quot;blog_Id&quot;)</span><br><span class="line">private B b;</span><br></pre></td></tr></table></figure>
<h3 id="双向-OneToOne关联"><a href="#双向-OneToOne关联" class="headerlink" title="双向@OneToOne关联"></a>双向@OneToOne关联</h3><p>如果能从A实体种直接引用到B，则可以为A增加一个类型为B的属性，这样两个实体类就是一种双向关联关系了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public class A&#123;</span><br><span class="line">    @Id</span><br><span class="line">    private String id;</span><br><span class="line"></span><br><span class="line">    private String name;</span><br><span class="line">    private String intro;</span><br><span class="line">    private String age;</span><br><span class="line"></span><br><span class="line">    @OneToOne(mappedBy = &quot;a&quot;)</span><br><span class="line">    private B b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>注意上面的代码中，不仅用<code>@OneToOne</code>标注了b，同时还设置<code>mappedBy</code>属性。<br>关于mappedBy属性，需要理解一下两点：</p>
<ul>
<li><code>mappedBy</code> = “a”表示，当前类（A）是通过B中a属性与之建立关联的。</li>
<li><p>设置了<code>mappedBy</code>属性的关系标注（各种<code>@XXXToXX</code>），表明当前类是关系的被维护方，而另外一个类则是关系维护方，你可以这样理解： </p>
<ol>
<li>关系维护方（B类）对应的是定义外键约束的数据库表     </li>
<li>关系被维护方（A类）对应于外键所在的数据库表       </li>
</ol>
</li>
</ul>
<p>最后需要注意的一个问题是，关系维护方才能够操作两者的关系。反过来说，A对象即使设置B属性，如果对该对象进行存储，并不会去更新外键关联，因为A是关系<strong>被维护方</strong>。</p>
<h2 id="OneToMany-ManyToOne"><a href="#OneToMany-ManyToOne" class="headerlink" title="@OneToMany,@ManyToOne"></a>@OneToMany,@ManyToOne</h2><p>如果在B中也定义一个C类型的成员变量，则两者形成了双向关系，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@Entity</span><br><span class="line">class C &#123;</span><br><span class="line">    @ManyToOne</span><br><span class="line">    private B b;</span><br><span class="line">   </span><br><span class="line">    // ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@Entity</span><br><span class="line">class B &#123;</span><br><span class="line">    @OneToMany(mappedBy = &quot;b&quot;)</span><br><span class="line">    private List&lt;C&gt; cs;</span><br><span class="line">    </span><br><span class="line">    // ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>@OneToMany</code>标注的实体类属性（或者其<code>getter</code>）类型为集合类型，<code>fetch</code>那么默认为<code>LAZY</code>。</p>
<p><code>mappedBy = &quot;b&quot;</code>表示，当前类（B）是通过C中b属性与之建立关联的。记住只要是使用了<code>mappedBy</code>，就是关系被维护方。</p>
<h2 id="ManyToMany"><a href="#ManyToMany" class="headerlink" title="@ManyToMany"></a>@ManyToMany</h2><p>一篇博客可以有多个标签，而一个标签可以使用在多篇博客上，<code>Blog</code>类和<code>Tag</code>类是典型的多对多关系。    </p>
<p><code>@ManyToMany</code>用以表示多对多关系，与<code>@OneToOne</code>和<code>@ManyToOne</code>一样，也可以有单向和双向关系之分。     </p>
<p>是单向还是双向，和标注本身并没有关系，只是看实体类之间是否相互引用。<br>下面的代码定义了<code>Blog</code>到<code>Tag</code>的单向多对多关系，所有操作都设置为级联的。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@Entity</span><br><span class="line">public class Blog &#123;</span><br><span class="line">    @ManyToMany(cascade = CascadeType.ALL)</span><br><span class="line">    private List&lt;Tag&gt; tags = new ArrayList&lt;Tag&gt;();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@Entity</span><br><span class="line">public class Tag &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果在<code>Tag</code>中定义一个<code>Blog</code>集合，则形成双向关系：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@Entity</span><br><span class="line">public class Tag &#123;</span><br><span class="line">    @ManyToMany(mappedBy = “tags”)</span><br><span class="line">    private List&lt;Blog&gt; blogs = new ArrayList&lt;Blog&gt;();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>mappedBy = &quot;tag&quot;</code>表示，当前类（<code>Tag</code>）是通过<code>Blog</code>中<code>tags</code>属性与之建立关联的。<code>Blog</code>是关系维护方，<code>Tag</code>类是关系被维护方。</p>
<h3 id="JoinTable"><a href="#JoinTable" class="headerlink" title="@JoinTable"></a>@JoinTable</h3><p>多对多关系的定义如果自动生成<code>DDL</code>，则会生成一张描述多对多关系的表，在这个例子中表明为<code>blog_tag</code>，表中的两个属性分别会命名为<code>blog_id</code>和<code>tag_id</code>。</p>
<p>如果需要指定表名和属性名，即基于自动映射的命名规则生成的Schema相关命名，和实际命名不相同时，则需要使用<code>@JoinTable</code>标注，如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@Entity</span><br><span class="line">public class Blog &#123;</span><br><span class="line">    @ManyToMany(cascade = CascadeType.ALL)</span><br><span class="line">    @JoinTable(</span><br><span class="line">        name=&quot;blog_tag_relation&quot;,</span><br><span class="line">        joinColumns=@JoinColumn(name=&quot;blog_id&quot;, referencedColumnName=&quot;id&quot;),</span><br><span class="line">        inverseJoinColumns=@JoinColumn(name=&quot;tag_id&quot;, referencedColumnName=&quot;id&quot;)</span><br><span class="line">    )</span><br><span class="line">    private List&lt;Tag&gt; tags = new ArrayList&lt;Tag&gt;();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="用-ManyToOne实现多对多"><a href="#用-ManyToOne实现多对多" class="headerlink" title="用@ManyToOne实现多对多"></a>用@ManyToOne实现多对多</h3><p>在实际情况下，我们建立多对多关系的同时还需要存储一些其他信息，例如该关系的创建时间，此时，我们可以将多对多关系分解为两个多对一关系。</p>
<p>定义一个<code>BlogTag</code>实体类来表示<code>Blog</code>与<code>Tag</code>之间的多对多关系：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@Entity</span><br><span class="line">class BlogTag &#123;</span><br><span class="line">    @ManyToOne</span><br><span class="line">    private Blog blog;</span><br><span class="line"></span><br><span class="line">    @ManyToOne</span><br><span class="line">    private Tag tag;</span><br><span class="line"></span><br><span class="line">    private Date createdTime;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>让<code>BlogTag</code>这个实体类建立与<code>Blog</code>和<code>Tag</code>的多对一关系：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@Entity</span><br><span class="line">public class Blog &#123;</span><br><span class="line">    @OneToMany(mappedBy = &quot;blog&quot;)</span><br><span class="line">    private final List&lt;BlogTag&gt; blogTags = new ArrayList&lt;BlogTag&gt;();</span><br><span class="line"></span><br><span class="line">    public List&lt;Tag&gt; getTags() &#123;</span><br><span class="line">        return blogTags.stream().map(BlogTag::getTag).collect(Collectors.toList());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@Entity</span><br><span class="line">public class Tag &#123;</span><br><span class="line">    @OneToMany(mappedBy = &quot;tag&quot;)</span><br><span class="line">    private final List&lt;BlogTag&gt; blogTags = new ArrayList&lt;BlogTag&gt;();</span><br><span class="line"></span><br><span class="line">    public List&lt;Blog&gt; getBlogs() &#123;</span><br><span class="line">        return blogTags.stream().map(BlogTag::getBlog).collect(Collectors.toList());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java Annotation]]></title>
      <url>http://yoursite.com/2017/03/27/android%20annotation/</url>
      <content type="html"><![CDATA[<h1 id="Java-Annotation"><a href="#Java-Annotation" class="headerlink" title="Java Annotation"></a>Java Annotation</h1><p>在Java1.5以后，引入了注解，也称作元数据。作为新的特性，同时也是基础知识之一，我们应该学会使用这种用法。</p>
<h2 id="注解的定义"><a href="#注解的定义" class="headerlink" title="注解的定义"></a>注解的定义</h2><p>能够添加到Java源代码的语法元数据。类、方法、变量、参数、包都可以被注解，可用来将信息元数据与程序元素进行关联。</p>
<h2 id="基本注解"><a href="#基本注解" class="headerlink" title="基本注解"></a>基本注解</h2><p>Java中常见的注解如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 表示该方法是重写父类中的方法，编译的时候会检查该方法，如果这个方法不是父类中存在的将会报错</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="comment">//表示该方法时已经过时的，表示该方法有风险或者有更好的替代方法</span></span><br><span class="line"><span class="meta">@Deprecated</span></span><br><span class="line"><span class="comment">//表示在编译的时候忽略某种错误，如版本检查等</span></span><br><span class="line"><span class="meta">@SuppressWarnings</span></span><br></pre></td></tr></table></figure>
<h2 id="元注解"><a href="#元注解" class="headerlink" title="元注解"></a>元注解</h2><p>元注解就是基本注解，所有自定义注解都将会用到元注解。元注解主要有以下四个：</p>
<h3 id="Retention"><a href="#Retention" class="headerlink" title="@Retention"></a>@Retention</h3><p>这个注解表示注解的保留方式，有如下三种：</p>
<ul>
<li>SOURCE：只保留在源码中，不保留在class中，同时也不加载到虚拟机中 </li>
<li>CLASS:保留在源码中，同时也保留到class中，但是不加载到虚拟机中 </li>
<li>RUNING:保留到源码中，同时也保留到class中，最后加载到虚拟机中</li>
</ul>
<p>注意：<br>①  运行时注解就是就是运行时运用反射，动态获取对象、属性、方法等，一般的IOC框架就是这样，可能会牺牲一点效率。<br>② 编译时注解就是在程序编译时根据注解进行一些额外的操作，大名鼎鼎的ButterKnife运用的就是编译时注解,ButterKnife在我们编译时，就根据注解，自动生成了一些辅助类。要玩编译时注解呢，你得先依赖apt，r然后自己写一个类继承AbstractProcessor,重写process方法，在里面实现如何把配置或注解的信息变成所需要的类。</p>
<h3 id="Target"><a href="#Target" class="headerlink" title="@Target"></a>@Target</h3><p>这个注解表示注解的作用范围，主要有如下:</p>
<ul>
<li>ElementType.FIELD <strong>注解作用于变量</strong></li>
<li>ElementType.METHOD <strong>注解作用于方法</strong></li>
<li>ElementType.PARAMETER <strong>注解作用于参数</strong></li>
<li>ElementType.CONSTRUCTOR <strong>注解作用于构造方法</strong></li>
<li>ElementType.LOCAL_VARIABLE <strong>注解作用于局部变量</strong></li>
<li>ElementType.PACKAGE <strong>注解作用于包</strong></li>
</ul>
<h3 id="Inherited"><a href="#Inherited" class="headerlink" title="@Inherited"></a>@Inherited</h3><p>是否可以被继承，默认为 false</p>
<h3 id="Documented"><a href="#Documented" class="headerlink" title="@Documented"></a>@Documented</h3><p>是否会保存到 Javadoc 文档中</p>
<h2 id="android中常见注解"><a href="#android中常见注解" class="headerlink" title="android中常见注解"></a>android中常见注解</h2><ul>
<li><p><strong>AnyThread</strong> 在任何一个线程中可调用<br>如果注释的是一个 <strong>方法</strong>或者一个 <strong>类</strong>，表示该方法或者该类中的所有方法都能被任何一个线程调用</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@AnyThread</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deliverResult</span><span class="params">(D data)</span> </span>&#123; ... &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>@RequiresApi</strong>  规定这个注解元素只能被设定的Api版本或更高版本调用</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequiresApi</span>(api = Build.VERSION_CODES.M)</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">request</span><span class="params">()</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p><strong> 注意：这儿有两种写法：<br>① @RequiresApi(api = Build.VERSION_CODES.M)<br>② @RequiresApi(Build.VERSION_CODES.M)<br>这两种写法都可以，第①中采用的是自定义属性api，第二种写法采用的是默认属性value</strong></p>
<ul>
<li><p><strong>TargetApi</strong>(Build.VERSION_CODES.XX) 用于屏蔽某一新api中才能使用的方法报的lint检查出现的错误。</p>
</li>
<li><p><strong>@SuppressLint(“NewApi”)</strong> 屏蔽一切新api中才能使用的方法报的android lint错误</p>
</li>
</ul>
<p>这两个注解的作用仅仅是屏蔽lint错误，在方法中还要判断版本做不同的操作</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.XX) &#123;  </span><br><span class="line">    <span class="comment">//高于XX版本进行的操作  </span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">    <span class="comment">//低于XX版本进行的操作  </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><p><strong>@CallSuper</strong> 要求方法必须调用父类该方法方法。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@CallSuper</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">onFocusLost</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>@NonNull</strong>和 <strong>@Nullable</strong>  定义一个变量或对象可以为空或不可为空，用在方法上表示方法可否返回空。</p>
</li>
<li><p><strong>@ColorInt</strong> 限制传入Hex颜色值。</p>
</li>
<li><p><strong>@DimenRes</strong> 注解一个integer参数，字段，或者方法的返回值是一个dimension resource指向</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android.R.dimen.app_icon_size</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>@IdDef</strong>和 <strong>@StringDef</strong><br>提到最常用的Toast，在API21之前，一般可以这么写<br>Toast.makeText(context, “msg”, 0).show();<br>但是21之后，0突然被划红线了，查看源码发现，之前是这么写的：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> LENGTH_SHORT = <span class="number">0</span>;  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> LENGTH_LONG = <span class="number">1</span>;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>makeText方法中单纯地写着int duration参数，而21之后，成了这样：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@IntDef</span>(&#123;LENGTH_SHORT, LENGTH_LONG&#125;)  </span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.SOURCE)  </span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Duration &#123;&#125;</span><br></pre></td></tr></table></figure></p>
<p>在makeText的duration参数之前加上了注解@Duration，这就要求传入Duration中的值才不会报警告。<br>可以想象，@IntDef和@String Def中放入了一个value数组。<br>在开发中，这两个注解就可以用来限制枚举值了。</p>
<ul>
<li><strong>资源类注解</strong>       <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@AnimatorRes</span>,<span class="meta">@AnimRes</span>,<span class="meta">@AnyRes</span>,<span class="meta">@ArrayRes</span>,<span class="meta">@AttrRes</span>,<span class="meta">@BoolRes</span>,<span class="meta">@ColorRes</span>,</span><br><span class="line"><span class="meta">@DimensRes</span>,@ DrawableRes,@ FractionRes,<span class="meta">@IdRes</span>,@ IntegerRes,<span class="meta">@InterpolatorRes</span>,</span><br><span class="line"><span class="meta">@LayoutRes</span>,<span class="meta">@MenuRes</span>,<span class="meta">@PluralsRes</span>,<span class="meta">@RawRes</span>,<span class="meta">@StringRes</span>,<span class="meta">@StyleableRes</span>,</span><br><span class="line"><span class="meta">@StyleRes</span>,<span class="meta">@TransitionRes</span>,<span class="meta">@XmlRes</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>这部分注解是非常有实用性的，有22个，用法如：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//getDrawable方法限定了传入的参数必须是Drawable资源文件 </span></span><br><span class="line">getDrawable(<span class="meta">@DrawableRes</span> <span class="keyword">int</span> id)</span><br></pre></td></tr></table></figure></p>
<ul>
<li>范围约束 <strong>@FloatRange</strong>、<strong>@IntRange</strong>和 <strong>@Size</strong>   </li>
</ul>
<p>前两个限制了数字的范围，比如可以用来限制传入参数值的范围;<br>@Size可以用来限定集合的大小或者限定字符串的长度，还可以做其他限制：<br>1.限制最小最大数量：@Size(min=1,max=10 )<br>2.数量必须是2的倍数（偶数）: @Size(multiple=2)      </p>
<ul>
<li><p><strong>进程类注解 @UiThread,@BinderThread,@MainThread,@WorkerThread</strong><br>用来限定方法或类在指定的线程类型中被调用</p>
</li>
<li><p><strong>@CheckResult</strong>  该注解意味着需要对方法的返回值进行处理</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@CheckResult</span>  </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">checkValid</span><span class="params">(String value)</span></span>&#123;  </span><br><span class="line">     <span class="keyword">return</span> TextUtils.isEmpty(value);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>当调用者直接调用 <strong>checkValid(“abc”);</strong> 时会报错，这意味着，需要对方法的返回值进行处理，无论返回true或false，需要进行后续操作，不能单单调用一句checkValid(“abc”);</p>
<ul>
<li><strong>权限注解@RequiresPermission</strong>   表示这个注解元素要求一个和几个权限       </li>
</ul>
<p>① 要求单个权限</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequiresPermission</span>(Manifest.permission.SET_WALLPAPER)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">setWallpaper</span><span class="params">(Bitmap bitmap)</span> <span class="keyword">throws</span> IOException</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequiresPermission</span>(ACCESS_COARSE_LOCATION)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> Location <span class="title">getLastKnownLocation</span><span class="params">(String provider)</span></span>;</span><br></pre></td></tr></table></figure>
<p>② 如果方法的调用需要权限，可以加这个注解，当需要几个权限中的至少一个时，使用anyOf</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequiresPermission</span>(anyOf = &#123; Manifest.permission.ACCESS_COARSE_LOCATION, Manifest.permission.ACCESS_FINE_LOCATION&#125;)</span><br></pre></td></tr></table></figure>
<p>③ 若需要多个权限，使用allOf</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequiresPermission</span>(allOf = &#123; Manifest.permission.READ_EXTERNAL_STORAGE, Manifest.permission.WRITE_EXTERNAL_STORAGE&#125;)</span><br></pre></td></tr></table></figure>
<p>④ 若需要单独的标注读和写的权限访问，所以可以用@Read或者@Write标注每一个权限需求</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequiresPermission</span>.Read(<span class="meta">@RequiresPermission</span>(READ_HISTORY_BOOKMARKS))</span><br><span class="line"><span class="meta">@RequiresPermission</span>.Write(<span class="meta">@RequiresPermission</span>(WRITE_HISTORY_BOOKMARKS))</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Uri BOOKMARKS_URI = Uri.parse(<span class="string">"content://browser/bookmarks"</span>);</span><br></pre></td></tr></table></figure>
<ul>
<li><strong>@SdkConstant</strong> 表示一个常量字段应该被输出在SDK工具中使用</li>
</ul>
<p>如添加一个自定义Action：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SdkConstant</span>(SdkConstantType.ACTIVITY_INTENT_ACTION)   </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String ACTION_MY_TEST = <span class="string">"android.intent.action.MY_TEST"</span>;</span><br></pre></td></tr></table></figure></p>
<p>则可以这样使用：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Intent myTest = <span class="keyword">new</span> Intent(Intent.ACTION_MY_TEST);   </span><br><span class="line">mContext.sendBroadcast(myTest);</span><br></pre></td></tr></table></figure>
<h2 id="自定义注解"><a href="#自定义注解" class="headerlink" title="自定义注解"></a>自定义注解</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target</span>(ElementType.METHOD)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> TestAnnotation &#123;</span><br><span class="line">    <span class="function">String <span class="title">name</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">id</span><span class="params">()</span> <span class="keyword">default</span> 0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注解关键字时@interface，然后上面标注为元注解，表示只能修饰方法并且加载到虚拟机中，里面时这个注解所具有的属性，name, id,我们在给方法加注解的时候设置相应的值。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@TestAnnotation</span>(name = <span class="string">"android"</span>,id =<span class="number">1</span>)</span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">testAnno</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<p>上面我们在一个方法上面添加注解，然后我们通过下面的方法将这个注解打印出来</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">outputAnnoDetail</span><span class="params">(Class clazz)</span></span>&#123;</span><br><span class="line">        Method[] methods = clazz.getDeclaredMethods();</span><br><span class="line">        <span class="keyword">for</span>(Method method  : methods) &#123;</span><br><span class="line">            TestAnnotation testAnnonation  = method.getAnnotation(TestAnnotation.class);</span><br><span class="line">            <span class="keyword">if</span> (testAnnonation != <span class="keyword">null</span>) &#123;</span><br><span class="line">                Log.d(<span class="string">"anonation"</span>, <span class="string">"name------&gt;"</span> + testAnnonation.name() + <span class="string">"------&gt;Id------&gt;"</span> + testAnnonation.id());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>结果就是：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">name------&gt;android------&gt;Id------&gt;<span class="number">1</span></span><br></pre></td></tr></table></figure>
<h2 id="自定义ViewInject"><a href="#自定义ViewInject" class="headerlink" title="自定义ViewInject"></a>自定义ViewInject</h2><p>我们在Activity中有一个View，我们要获得这个View的实例是要通过findViewById这个方法，然后这个方法返回的是一个Object类型，我们还需要进行强制的类型转换。<br>如果使用注解的方式，则可以省略很多代码，而且节省时间。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ViewInject</span>(R.id.btn_circle)</span><br><span class="line"><span class="keyword">private</span> Button btnCircle;</span><br></pre></td></tr></table></figure>
<h3 id="定义一个注解"><a href="#定义一个注解" class="headerlink" title="定义一个注解"></a>定义一个注解</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME) <span class="comment">//加到虚拟机</span></span><br><span class="line"><span class="meta">@Target</span>(ElementType.FIELD) <span class="comment">//作用于变量(字段)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> ViewInject &#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">value</span><span class="params">()</span> <span class="keyword">default</span> -1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>注意：如果注解中的值不是value，那么在进行注解是时候，需要给出对应的值的名字</strong>，如上面的 <strong>TestAnnotation</strong></p>
<h3 id="定义方法"><a href="#定义方法" class="headerlink" title="定义方法"></a>定义方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">injectViews</span><span class="params">(Activity activity)</span></span>&#123;</span><br><span class="line">    Class&lt;? extends Activity&gt; object = activity.getClass();</span><br><span class="line">    <span class="comment">//通过Class获取activity的所有字段</span></span><br><span class="line">    Field[] fields = object.getDeclaredFields();</span><br><span class="line">    <span class="comment">// 遍历所有字段</span></span><br><span class="line">    <span class="keyword">for</span> (Field field : fields) &#123;</span><br><span class="line">        <span class="comment">// 获取字段的注解，如果没有ViewInject注解，则返回null</span></span><br><span class="line">        ViewInject viewInject = field.getAnnotation(ViewInject.class);</span><br><span class="line">        <span class="keyword">if</span> (viewInject!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="comment">// 获取字段注解的参数，这就是我们传进去控件Id</span></span><br><span class="line">            <span class="keyword">int</span> viewId = viewInject.value();</span><br><span class="line">            <span class="keyword">if</span> (viewId != -<span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">// 获取类中的findViewById方法，参数为int</span></span><br><span class="line">                    Method method = object.getMethod(<span class="string">"findViewById"</span>,<span class="keyword">int</span>.class);</span><br><span class="line">                    <span class="comment">// 执行该方法，返回一个Object类型的View实例</span></span><br><span class="line">                    Object resView = method.invoke(activity,viewId);</span><br><span class="line">                    field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">                    <span class="comment">// 把字段的值设置为该View的实例</span></span><br><span class="line">                    field.set(activity,resView);</span><br><span class="line">                &#125;<span class="keyword">catch</span> (NoSuchMethodException  e)&#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;<span class="keyword">catch</span> (IllegalAccessException  e)&#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;<span class="keyword">catch</span> (InvocationTargetException e)&#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>从上面中，可以看出，其实实际上还是使用了findViewById。</p>
<h3 id="使用注解"><a href="#使用注解" class="headerlink" title="使用注解"></a>使用注解</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">public class MainActivity extends AppCompatActivity &#123;</span><br><span class="line">    @ViewInject(R.id.btn_circle)</span><br><span class="line">    private Button btnCircle;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @RequiresApi(api = Build.VERSION_CODES.LOLLIPOP)</span><br><span class="line">    @Override</span><br><span class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class="line">        super.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line">        AnnoUtils.injectViews(this);</span><br><span class="line"></span><br><span class="line">       &lt;/* btnCircle.setOnClickListener(new View.OnClickListener() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void onClick(View view) &#123;</span><br><span class="line">                Toast.makeText(MainActivity.this, "找到了...", Toast.LENGTH_SHORT).show();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;); */</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[体味RxJava2.0(一)]]></title>
      <url>http://yoursite.com/2017/01/06/%E4%BD%93%E5%91%B3rxjava2.0%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      <content type="html"><![CDATA[<h1 id="体味RxJava2-0-一"><a href="#体味RxJava2-0-一" class="headerlink" title="体味RxJava2.0(一)"></a>体味RxJava2.0(一)</h1><p>Rxjava2.0也发布了一段时间了。然后看到一些小的不同，就跟大大们分享一下，如果有什么不合适的就直接☞（指出）哈！</p>
<h3 id="2-0的模式"><a href="#2-0的模式" class="headerlink" title="2.0的模式"></a>2.0的模式</h3><p>在1.0中就提到过rxjava使用的是观察者模式，在2.0中仍然么有改变。但是在2.0中为了解决1.0中的一个不完善的问题——Backpressure（背压）,支持了两种不同的观察者模式。</p>
<ul>
<li>Observable(被观察者)/Observer（观察者）</li>
<li>Flowable(被观察者)/Subscriber(观察者)</li>
</ul>
<p><img src="https://dn-mhke0kuv.qbox.me/1cfc1779f2a93ad2f7c8.png" alt="观察者模式"></p>
<p>在2.0中专门对背压或者不背压进行了区分。如果是不背压就使用第一种方式，如果是背压就使用第二种方式。<br><strong>注意：Obsesrver用于订阅Observable，而Subscriber用于订阅Flowable</strong></p>
<h3 id="背压策略"><a href="#背压策略" class="headerlink" title="背压策略"></a>背压策略</h3><p>说了那么多，那什么是背压，被压其实就是一种策略。在1.0中，我们就知道被观察者发送一个事件，观察者就处理一个事件，一直到onError()或者onCompleted()。那么，这样就产生了一个问题：如果被观察者的发送速度大于观察的处理速度，那么就会在内存中堆积，当堆积的数量达到了128，就会抛出</p>
<pre><code>Caused by: rx.exceptions.MissingBackpressureException
</code></pre><p>的异常。在2.0中就不会出现这中问题，如果仍然使用上面的<strong> Observable(被观察者)/Observer（观察者）</strong>方式，在达到128的时候，也不会抛出这个异常，它会继续堆积，直到OutOfMemoryError(内存溢出)<br>那么就借用大神的一句话来总结一下背压<br><strong>背压是指在异步场景中，被观察者发送事件速度远快于观察者的处理速度的情况下，一种告诉上游的被观察者降低发送速度的策略</strong></p>
<h3 id="Observer-Subscriber（观察者）"><a href="#Observer-Subscriber（观察者）" class="headerlink" title="Observer/Subscriber（观察者）"></a>Observer/Subscriber（观察者）</h3><p>从上面我们可以知道，支持背压和不支持背压是通过下游（观察者）通知上游（被观察者），先得了解一下观察者的变化：</p>
<h4 id="Observer"><a href="#Observer" class="headerlink" title="Observer"></a>Observer</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">Observer&lt;Integer&gt; observer = <span class="keyword">new</span> Observer&lt;Integer&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSubscribe</span><span class="params">(Disposable d)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Integer value)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">            Log.d(TAG,value+<span class="string">""</span>);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onComplete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            Log.d(TAG,<span class="string">"compeleted.."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    Observable.range(<span class="number">1</span>,<span class="number">5</span>).subscribe(observer);</span><br></pre></td></tr></table></figure>
<p>可以看到在2.0中对Observer增加了一个 <strong>onSubscribe(Disposable d)</strong> 的方法。这个方法是在执行订阅之后发送数据之前会调用。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * Represents a disposable resource.</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Disposable</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * Dispose the resource, the operation should be idempotent.</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dispose</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * Returns true if this resource has been disposed.</span><br><span class="line">     * <span class="doctag">@return</span> true if this resource has been disposed</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isDisposed</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在订阅时将一个Disposable传入观察者，这个Disposable其实就是Subscription，可以用于取消订阅。<br><strong>dispose() 用于取消订阅</strong><br>比如，将上面的onSubscribe()和onNext()更改一下</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">private</span> Disposable disposable;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSubscribe</span><span class="params">(Disposable d)</span> </span>&#123;</span><br><span class="line">    Log.d(TAG, <span class="string">"Disposable---&gt;&gt;&gt;&gt;"</span>);</span><br><span class="line">    disposable = d;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Integer value)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (value == <span class="number">3</span>)</span><br><span class="line">        disposable.dispose();</span><br><span class="line">     <span class="keyword">else</span>&#123;</span><br><span class="line">         Log.d(TAG, value + <span class="string">""</span>);</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<p>结果就会输出：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">onNext---&gt;<span class="number">1</span></span><br><span class="line">onNext---&gt;<span class="number">2</span></span><br></pre></td></tr></table></figure>
<p>后面的几个数字就不能被发出了。<br>那么问题来了：<br><strong>1. 可以看出上面被终止之后没有打印onError()或者onCompleted(),这是为什么呢？</strong><br><strong>2. 如果我想恢复继续发送呢，这个时候该怎么办呢？</strong><br>对于1，disposable.dispose()取消订阅，就相当于说，观察者已经不再订阅被观察者了，所以不论被观察者是什么情况，观察者都不再执行任何操作！<br>对于2， 取消订阅意味着我跟你无关了，只能重新订阅~~</p>
<h4 id="Subscriber"><a href="#Subscriber" class="headerlink" title="Subscriber"></a>Subscriber</h4><p>先看一下2.0中神秘的Subscriber：  </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">Subscriber&lt;Integer&gt; subscriber = <span class="keyword">new</span> Subscriber&lt;Integer&gt;() &#123;</span><br><span class="line">           <span class="meta">@Override</span></span><br><span class="line">           <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSubscribe</span><span class="params">(Subscription s)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           <span class="meta">@Override</span></span><br><span class="line">           <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Integer integer)</span> </span>&#123;</span><br><span class="line">               Log.d(TAG, <span class="string">"onNext---&gt;&gt;&gt;&gt;"</span>+integer);</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           <span class="meta">@Override</span></span><br><span class="line">           <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable t)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           <span class="meta">@Override</span></span><br><span class="line">           <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onComplete</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">           &#125;</span><br><span class="line">       &#125;;</span><br></pre></td></tr></table></figure>
<p>从上面可以看出和Observer一样，都有一个onSubscribe(Subscription s)的方法，都是在订阅之后发送数据之前调用的，来看看Subscription<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Subscription</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">request</span><span class="params">(<span class="keyword">long</span> n)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cancel</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>这其中只有两个方法<strong>request(long n)</strong> 和 <strong>cancel()</strong></p>
<p><strong>cancel()</strong><br>就是取消订阅，这个没商量，跟上面的Observer一样。<br><strong>request(long n)</strong>     </p>
<p><img src="http://upload-images.jianshu.io/upload_images/1978544-d4527e27f47f3dc1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="flowable.png"></p>
<p>结合上图，当我们订阅之后    </p>
<pre><code>Flowable.range(1,10).subscribe(subscriber)；
</code></pre><p>这时你会发现怎么一个值都不打印，这是因为观察者没有告诉被观察者到底发送几个，所以我们将Subscriber这样修改(<strong>这时就会用到request(n)</strong>)：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">Subscriber&lt;Integer&gt; subscriber = <span class="keyword">new</span> Subscriber&lt;Integer&gt;() &#123;</span><br><span class="line">           Subscription sub;</span><br><span class="line">           <span class="meta">@Override</span></span><br><span class="line">           <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSubscribe</span><span class="params">(Subscription s)</span> </span>&#123;</span><br><span class="line">               Log.d(TAG, <span class="string">"onSubscribe---&gt;&gt;&gt;&gt;"</span>);</span><br><span class="line">               sub = s;</span><br><span class="line">               s.request(<span class="number">1</span>);</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           <span class="meta">@Override</span></span><br><span class="line">           <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Integer integer)</span> </span>&#123;</span><br><span class="line">               Log.d(TAG, <span class="string">"onNext---&gt;&gt;&gt;&gt;"</span>+integer);</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           <span class="meta">@Override</span></span><br><span class="line">           <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable t)</span> </span>&#123;</span><br><span class="line">               Log.d(TAG, <span class="string">"onError---&gt;&gt;&gt;&gt;"</span>+t.getMessage());</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           <span class="meta">@Override</span></span><br><span class="line">           <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onComplete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">               Log.d(TAG, <span class="string">"onComplete---&gt;&gt;&gt;&gt;"</span>);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;;</span><br></pre></td></tr></table></figure></p>
<p>这样修改之后，你会发现只是打印了一个值，后面的值都没有打印处理，这是因为打印完成一个之后，必须继续以这种方式告诉被观察者你下一次需要几个：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">Subscriber&lt;Integer&gt; subscriber = <span class="keyword">new</span> Subscriber&lt;Integer&gt;() &#123;</span><br><span class="line">          Subscription sub;</span><br><span class="line">          <span class="meta">@Override</span></span><br><span class="line">          <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSubscribe</span><span class="params">(Subscription s)</span> </span>&#123;</span><br><span class="line">              Log.d(TAG, <span class="string">"onSubscribe---&gt;&gt;&gt;&gt;"</span>);</span><br><span class="line">              sub = s;</span><br><span class="line">              s.request(<span class="number">1</span>);</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          <span class="meta">@Override</span></span><br><span class="line">          <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Integer integer)</span> </span>&#123;</span><br><span class="line">              Log.d(TAG, <span class="string">"onNext---&gt;&gt;&gt;&gt;"</span>+integer);</span><br><span class="line">              sub.request(<span class="number">1</span>);</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          <span class="meta">@Override</span></span><br><span class="line">          <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable t)</span> </span>&#123;</span><br><span class="line">              Log.d(TAG, <span class="string">"onError---&gt;&gt;&gt;&gt;"</span>+t.getMessage());</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          <span class="meta">@Override</span></span><br><span class="line">          <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onComplete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">              Log.d(TAG, <span class="string">"onComplete---&gt;&gt;&gt;&gt;"</span>);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;;</span><br></pre></td></tr></table></figure>
<p>我们结合上图综合来看，当订阅之后，首先在onSubscribe(Subscription s)方法中调用了 <strong>s.request(1)</strong>，我们说了onSubscribe(Subscription s)会在订阅后发送数据前调用，所以这里面先<strong>request(1)</strong><br>，在onNext()的<strong>sub.request(1)</strong>，这个就是告诉被观察者，我下次需要1个,然后就向下send(1),依次继续打印，就打印完成所有~~。</p>
<h3 id="Observable-Flowable-被观察者"><a href="#Observable-Flowable-被观察者" class="headerlink" title="Observable/Flowable(被观察者)"></a>Observable/Flowable(被观察者)</h3><p>对于Observable我们已经比较了解了，但是在2.0中也有些许不同</p>
<h4 id="Observable"><a href="#Observable" class="headerlink" title="Observable"></a>Observable</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 2.x Observable</span></span><br><span class="line"> Observable&lt;Integer&gt; observable = Observable.create(<span class="keyword">new</span> ObservableOnSubscribe&lt;Integer&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">subscribe</span><span class="params">(ObservableEmitter&lt;Integer&gt; emitter)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">                emitter.onNext(<span class="number">1</span>);</span><br><span class="line">                emitter.onNext(<span class="number">2</span>);</span><br><span class="line">                emitter.onNext(<span class="number">3</span>);</span><br><span class="line">                emitter.onNext(<span class="number">4</span>);</span><br><span class="line">                emitter.onComplete();</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure>
<h4 id="Flowable"><a href="#Flowable" class="headerlink" title="Flowable"></a>Flowable</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Flowable.create(<span class="keyword">new</span> FlowableOnSubscribe&lt;Integer&gt;() &#123;</span><br><span class="line">           <span class="meta">@Override</span></span><br><span class="line">           <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">subscribe</span><span class="params">(FlowableEmitter&lt;Integer&gt; emitter)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">               emitter.onNext(<span class="number">1</span>);</span><br><span class="line">               emitter.onNext(<span class="number">2</span>);</span><br><span class="line">               emitter.onNext(<span class="number">3</span>);</span><br><span class="line">               emitter.onNext(<span class="number">4</span>);</span><br><span class="line">               emitter.onComplete();</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;, BackpressureStrategy.BUFFER).subscribe(subscriber);</span><br></pre></td></tr></table></figure>
<p>从上面看出，两种被观察者的写法差不多，但是Flowable多了一个BackpressureStrategy.BUFFER的参数，仅此而已。</p>
<p>那么BackpressureStrategy到底是什么？</p>
<h4 id="BackpressureStrategy"><a href="#BackpressureStrategy" class="headerlink" title="BackpressureStrategy"></a>BackpressureStrategy</h4><p>BackpressureStrategy是背压的策略，有几种方式：   </p>
<ul>
<li><strong>MISSING</strong>  不会缓存数据和删除数据，那么下游必须处理溢出</li>
<li><strong>ERROR</strong>    下游处理事件的速度和上游发送速度不均衡的时候抛出MissingBackpressureException</li>
<li><strong>BUFFER</strong> 把上游收到的全部缓存下来，等下游来请求再发给下游</li>
<li><strong>DROP</strong> 丢弃存不下的数据</li>
<li><strong>LATEST</strong>    一直保留最新的数据</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Rx系列之RxJava初识]]></title>
      <url>http://yoursite.com/2016/07/28/Rx%E5%AE%B6%E6%97%8F%E4%B9%8BRxJava%E5%88%9D%E8%AF%86/</url>
      <content type="html"><![CDATA[<h1 id="Rx系列之RxJava初识"><a href="#Rx系列之RxJava初识" class="headerlink" title="Rx系列之RxJava初识"></a>Rx系列之RxJava初识</h1><h3 id="写在前面的话"><a href="#写在前面的话" class="headerlink" title="写在前面的话"></a>写在前面的话</h3><p>第一次听说Rxjava的时候，我顿时就懵b了,什么事RxJava？新的一门强大的语言么！顿时怀着对RxJava的期待，慢慢的去了解了。后来才发现，RxJava其实用到了响应式开发的一种新的开发模式。响应式开发，哇，感觉不得鸟啊！所以在不断的挖掘下，对RxJava做了一个稍微的整理。</p>
<h3 id="响应式编程"><a href="#响应式编程" class="headerlink" title="响应式编程"></a>响应式编程</h3><p>在开始了解RxJava之前，得先了解一下<strong>响应式编程</strong>，这是因为Rx响应式编程也是响应式编程的一种。<strong>响应式编程：一种面向数据流和变化传播的编程范式。</strong>不懂啊，没关系，我们来举个栗子：<br><img src="http://ww4.sinaimg.cn/large/52eb2279jw1f2rx409pcnj2044048mx5.jpg" alt=""><br>例如，在我们现在的命令式编程中，a = b + c 表示将表达式的结果赋值给a,那么之后，我改变b或者c之后，a会改变么？有人可能会说肯定会啊。其实是不会变的:</p>
<pre><code>a = b + c;
a = ?
b = d ;
a = ? // 两次的a不会改变
</code></pre><p>所以如上，它是不会变得。那么<strong>响应式编程</strong>与<strong>命令式</strong>的区别在哪里咯？<br>还是如上所说，在<strong>响应式编程</strong>中 ，a的值会随着b或c的改变而改变。</p>
<p>当然，上面所说的，没有解决实际的问题，上面只是一个表面现象，那么最根本的区别到底是什么？<br><strong>可以这样说，当b改变时候，它向a发了一个通知：hi，我改变了，你变一下。</strong>但是，命令式编程中b改变，不会去通知a改变。所以，最大的区别就是：某个数据变更，那么就会发个<strong>通知</strong>。</p>
<p>那么，我们还可以，再进行联想一下：既然响应式能够通知，那是不是，在它通知之前，我可以做任何事情呢？<br>设想一下这个情景：小明，放学回家之后，他跟他妈妈说，饭做好了叫我。<strong>“叫他”</strong>这个就是个通知，那么在这个通知之前，小明是不是可以看电视，做作业…。哟嚯，这个就有意思了，这个像不像我们所说的异步呢？</p>
<h3 id="RxJava之Observables"><a href="#RxJava之Observables" class="headerlink" title="RxJava之Observables"></a>RxJava之Observables</h3><p>用过或者了解过Rxjava的人都知道，在Rxjava中，使用的是Observables。</p>
<p>在面向对象的架构中，开发者致力于创建一组解耦的实体。这样的话，实体就可以在不用妨碍整个系统的情况下可以被测试、复用和维护。设计这种系统就带来一个棘手的负面影响：维护相关对象之间的<strong>统一</strong>。</p>
<p>在众多的设计模式中，观察者模式，是最符合<strong>响应式编程</strong>的一种设计模式，为什么这么说呢？<br><strong>观察者模式</strong>是一种行为模式并提供一种以一对多的依赖来绑定对象的方法：<strong>即当一个对象发生变化时，依赖它的所有对象都会被通知并且会自动更新</strong>。这也就是为什么RxJava中使用到Observables的原因。</p>
<h3 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h3><p>观察者模式的基本需求：观察者和被观察者之间是完全分离的，当被观察者的状态发生变化之后，<br>通过<strong>Register（注册）</strong> 或者 <strong>Subscribe（订阅）</strong>的方式，通知观察者。如上小明让他妈妈叫他吃饭的例子：观察者就是小明，被观察者是饭，那个会说了，被观察者不是他妈妈么！他妈妈其实就是一个订阅或者注册，当饭这一状态变成好了的时候，那么就会通知小明。</p>
<p> Android 开发中一个比较典型的例子是点击监听器 <strong>OnClickListener</strong> 。对设置 <strong>OnClickListener</strong> 来说， <strong>View</strong> 是被观察者， <strong>OnClickListener</strong> 是观察者，二者通过 <strong>setOnClickListener() </strong>方法达成订阅关系。订阅之后用户点击按钮的瞬间，Android Framework 就会将点击事件发送给已经注册的 OnClickListener 。采取这样被动的观察方式，既省去了反复检索状态的资源消耗，也能够得到最高的反馈速度。</p>
<p><img src="http://ww3.sinaimg.cn/mw1024/52eb2279jw1f2rx4446ldj20ga03p74h.jpg" alt="观察者模式图"></p>
<h3 id="Rxjava的观察者模式"><a href="#Rxjava的观察者模式" class="headerlink" title="Rxjava的观察者模式"></a>Rxjava的观察者模式</h3><p>在Rxjava中有四种角色：</p>
<ul>
<li><strong>Observable（被观察者）</strong>    </li>
<li><strong>Observer（观察者）</strong>  </li>
<li><strong>Subcriber</strong></li>
<li><strong>Subjects</strong></li>
</ul>
<p>Observable 和 Observer通过 subcribe（订阅）实现订阅关系，所以Observable在状态发生变化的时候通知Observer。</p>
<h3 id="Observer（观察者）"><a href="#Observer（观察者）" class="headerlink" title="Observer（观察者）"></a>Observer（观察者）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Observer&lt;String&gt; observer = <span class="keyword">new</span> Observer&lt;String&gt;() &#123;</span><br><span class="line">           <span class="meta">@Override</span></span><br><span class="line">           <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</span><br><span class="line">               </span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           <span class="meta">@Override</span></span><br><span class="line">           <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           <span class="meta">@Override</span></span><br><span class="line">           <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">           &#125;</span><br><span class="line">       &#125;;</span><br></pre></td></tr></table></figure>
<p>从中我们可以看出，Observer（观察者）除了传统的onNext（onEvent）还实现了onCompleted()和onError()。<br><strong>onCompleted()</strong>：告知Observable没有更多的数据了，即是没有新的onNext()发出时，就执行onCompleted()。<br><strong>onError()</strong>:在事件处理过程中，出现了异常或者错误，就会被触发，同时整个队列将被终止，不再有事件发出。</p>
<p>在一个队列中，<strong>onCompleted()</strong>和<strong>onError()</strong> 都是最后触发的，而且两者中只有一个会被触发。</p>
<h3 id="Subcriber"><a href="#Subcriber" class="headerlink" title="Subcriber"></a>Subcriber</h3><p>接下来我们再看看<strong>Subcriber</strong>:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Subscriber&lt;String&gt; subscriber = <span class="keyword">new</span> Subscriber&lt;String&gt;() &#123;</span><br><span class="line">           <span class="meta">@Override</span></span><br><span class="line">           <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           <span class="meta">@Override</span></span><br><span class="line">           <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           <span class="meta">@Override</span></span><br><span class="line">           <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">           &#125;</span><br><span class="line">       &#125;;</span><br></pre></td></tr></table></figure>
<p>欸嘿嘿，这个怎么跟上面的Observer一毛一样啊！然后我们查看Subcriber的源码就会发现，其实Subscriber其实就是实现了Observer接口的一个抽象类。</p>
<p>那么问题来了：<strong>Observer和Subcriber有什么区别呢？我调用时候使用Observer还是Subcriber呢？</strong><br>subcriber其实是对Observer进行了一些扩展，在Rxjava的Subcribe（订阅）中，Observer总是先辈转换成一个Subcriber再使用的，所以，如果用的话，就用Subcriber就行。</p>
<p><strong>区别：</strong>     </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//增加Subscription 到关于Subcriber的一个Subscription列表中</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Subscription s)</span> </span>&#123;</span><br><span class="line">        subscriptions.add(s);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这是 Subscriber 所实现的另一个接口 Subscription 的方法，用于取消订阅。</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">unsubscribe</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    subscriptions.unsubscribe();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">   <span class="comment">//这是 Subscriber 所实现的另一个接口 Subscription 的方法，用于判断当前是否订阅。</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">isUnsubscribed</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> subscriptions.isUnsubscribed();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这是 Subscriber 增加的方法。它会在 Subscribe   刚开始，而事件还未发送之前被调用，可以用于做一些准备工作，例如数据的清零或重置</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStart</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// do nothing by default</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h3 id="创建Observable"><a href="#创建Observable" class="headerlink" title="创建Observable"></a>创建Observable</h3><p>在上述中，我们已经了解了观察者的一些基本内容，那么被观察者怎么创建呢？</p>
<h4 id="Observable-create"><a href="#Observable-create" class="headerlink" title="Observable.create()"></a>Observable.create()</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Observable.create(<span class="keyword">new</span> Observable.OnSubscribe&lt;String&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Subscriber&lt;? <span class="keyword">super</span> String&gt; subscriber)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure>
<p>通过 <strong>Observable.create()</strong>方法创建，那么就需要一个OnSubcribe的对象，卧槽，这个OnSubcribe是个什么东东？打开源就知道，这个OnSubcriber是实现了一个Acton1接口的接口。</p>
<p>每个Observable有一个final OnSubscribe<t> onSubscribe 成员，在唉成员方法中调用call()方法，这个call方法的参数就是 Observable.subscribe() 方法传入的 Subsriber实例。</t></p>
<p><strong>注意：</strong>在Rxjava中ActionX系列，其实就是无返回值的的接口</p>
<h4 id="订阅"><a href="#订阅" class="headerlink" title="订阅"></a>订阅</h4><p>上面了解了观察者和被观察者，那么就可以进行订阅了，先来看一个简单的栗子：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//被观察者</span></span><br><span class="line">Observable&lt;Integer&gt; observableInteger = Observable.create(<span class="keyword">new</span> Observable</span><br><span class="line">        .OnSubscribe&lt;Integer&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Subscriber&lt;? <span class="keyword">super</span> Integer&gt; subscriber)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            subscriber.onNext(i);</span><br><span class="line">        &#125;</span><br><span class="line">        subscriber.onCompleted();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//观察者</span></span><br><span class="line">Subscriber subscriber = <span class="keyword">new</span> Subscriber&lt;Integer&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Log.d(TAG, <span class="string">"onCompleted: Observable completed"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line">        Log.d(TAG, <span class="string">"onError: Observable error"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Integer integer)</span> </span>&#123;</span><br><span class="line">        Log.d(TAG, <span class="string">"onNext: "</span> + integer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//进行订阅</span></span><br><span class="line">Subscription subscription = observableInteger.subscribe(subscriber);</span><br><span class="line"></span><br><span class="line">Log.d(TAG, <span class="string">"subscription: "</span> + subscription.isUnsubscribed() + <span class="string">",Observable:"</span> + subscriber</span><br><span class="line">        .isUnsubscribed());</span><br></pre></td></tr></table></figure>
<p>这里创建了一个观察者，一个订阅者，然后通过</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Subscription subscription = observableInteger.subscribe(subscriber);</span><br></pre></td></tr></table></figure>
<p>生成一个Subscription订阅关系。<br>为了确定这个订阅是否生效，就打印了里面的循环数据：</p>
<pre><code>onNext: 0
onNext: 1
onNext: 2
onNext: 3
onNext: 4
onCompleted: Observable completed
subscription: true,Observable:true
</code></pre><p>可以看到，Subscriber和Observanle之间已经进行了订阅，如果没有Subscribe就不会发射事件。<br>在Subsriber(Observer)中不关心你给我的到底是个什么，你给我什么，我就操作什么！</p>
<p>有人会说了：如果直接用一个循环打印，岂不是更简单，你这样做复杂化了，太麻烦。<br>确实，在这个例子中复杂化了，上面讲到Rxjava的最大的优势就是：<strong>异步</strong>，并不是进行这么简单的操作，所以，稍安勿躁，请听我慢慢道来。</p>
<h4 id="Observable-from"><a href="#Observable-from" class="headerlink" title="Observable.from()"></a>Observable.from()</h4><p>在上面的例子中，我们创建一个序列，然后一个一个的发射他们，如果现在我们已经有一个序列呢？有没有方法去直接实现它。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Integer&gt; integers = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">integers.add(<span class="number">1</span>);</span><br><span class="line">integers.add(<span class="number">2</span>);</span><br><span class="line">integers.add(<span class="number">3</span>);</span><br><span class="line">integers.add(<span class="number">4</span>);</span><br><span class="line">integers.add(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">Subscriber subscriber = <span class="keyword">new</span> Subscriber&lt;Integer&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Log.d(TAG, <span class="string">"onCompleted: Observable completed"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line">        Log.d(TAG, <span class="string">"onError: Observable error"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Integer integer)</span> </span>&#123;</span><br><span class="line">        Log.d(TAG, <span class="string">"onNext: "</span> + integer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Observable.from(integers).subscribe(subscriber);</span><br></pre></td></tr></table></figure>
<p>这个跟上面的结果一样一样的。</p>
<h4 id="Observable-just"><a href="#Observable-just" class="headerlink" title="Observable.just()"></a>Observable.just()</h4><p><strong>将传入的参数依次发射出去。</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Subscriber subscriber = <span class="keyword">new</span> Subscriber&lt;Integer&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Log.d(TAG, <span class="string">"onCompleted: Observable completed"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line">        Log.d(TAG, <span class="string">"onError: Observable error"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Integer integer)</span> </span>&#123;</span><br><span class="line">        Log.d(TAG, <span class="string">"onNext: "</span> + integer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Observable.just(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>).subscribe(subscriber);</span><br></pre></td></tr></table></figure>
<p>just()中可以传入1-10个参数，并且将传入参数的顺序来发射出去。</p>
<h3 id="Subjects"><a href="#Subjects" class="headerlink" title="Subjects"></a>Subjects</h3><p>上面我们已经了解了Observer，Subscribe和Observable，还有一个Subject，那么Subject是什么呢？</p>
<p>让我们来看看源码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Subject</span>&lt;<span class="title">T</span>, <span class="title">R</span>&gt; <span class="keyword">extends</span> <span class="title">Observable</span>&lt;<span class="title">R</span>&gt; <span class="keyword">implements</span> <span class="title">Observer</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>从这个当中，我们可以看出，这个Subject即实现了Observer，又继承了Observable，也就是说，Subject当中有观察者又有被观察者，这…你tm在逗我么？其实这并没有问题，就像你自己，既继承了你爸爸的一部分，又继承了你妈妈的一部分，然后形成了你，所以：存在即合理。</p>
<p>那有人会问了：这个既有Observer又有Observable，那该怎么用呢？<br>很简单，它既可以当Observer，又可以当作Observable       </p>
<p>可以用一个表达式来表示：<br><strong><em>Subject = Observable + Observer</em></strong>       </p>
<p>当Subject作为Observer的时候，可以订阅Observable；当Subject作为Observable的时候，可以向Observer发射数据，很显然，作为一个Observable，观察者们或者其它Subject都可以订阅它。</p>
<p><strong>RxJava针对不同的场景提供四种不同的Subject：</strong></p>
<ul>
<li><strong>PublishSubject</strong></li>
<li><strong>BehaviorSubject</strong></li>
<li><strong>ReplaySubject</strong></li>
<li><strong>AsyncSubject</strong></li>
</ul>
<p>也就是说，他们并不是在所有的实现中都全部存在</p>
<h4 id="AsyncSubject"><a href="#AsyncSubject" class="headerlink" title="AsyncSubject"></a>AsyncSubject</h4><p><strong>当Observable完成时AsyncSubject只会发布最后一个数据给已经订阅的每一个观察者。</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">AsyncSubject&lt;String&gt; asyncSubject = AsyncSubject.create();</span><br><span class="line"></span><br><span class="line">Subscriber&lt;String&gt; subscriber = <span class="keyword">new</span> Subscriber&lt;String&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Log.d(TAG, <span class="string">"onCompleted: AsyncSubject Completed!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line">        Log.d(TAG, <span class="string">"onError: AsyncSubject Error!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        Log.d(TAG, <span class="string">"onNext: "</span>+s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Subscription subscription = asyncSubject.subscribe(subscriber);</span><br><span class="line"></span><br><span class="line">asyncSubject.onNext(<span class="string">"one!"</span>);</span><br><span class="line">asyncSubject.onNext(<span class="string">"two!"</span>);</span><br><span class="line">asyncSubject.onNext(<span class="string">"three!"</span>);</span><br><span class="line">asyncSubject.onCompleted();</span><br></pre></td></tr></table></figure>
<p>看一下结果如何：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">onNext: three!</span><br><span class="line">onCompleted: AsyncSubject Completed!</span><br></pre></td></tr></table></figure>
<p><strong>当然如果原始Observable没有发射任何值，AsyncObject也不发射任何值</strong><br>AsyncSubject会把最后一个值发射给后续的观察者。如下图</p>
<p><img src="https://mcxiaoke.gitbooks.io/rxdocs/content/images/S.AsyncSubject.png" alt="AsyncSubject示意图"></p>
<p>那么，在我们这个AsyncSubject异常的情况下会发生什么呢？</p>
<p><img src="https://mcxiaoke.gitbooks.io/rxdocs/content/images/S.AsyncSubject.e.png" alt="AsyncSubject异常示意图"></p>
<p><strong>请注意：如果在AsyncSubject异常时，那么不会向观察者发射任何值，只会传递一个错误的通知。</strong></p>
<h4 id="BehaviorSubject"><a href="#BehaviorSubject" class="headerlink" title="BehaviorSubject"></a>BehaviorSubject</h4><p><strong>当观察者订阅BehaviorSubject时，它开始发射原始Observable最近发射的数据（如果此时还没有收到任何数据，它会发射一个默认值），然后继续发射其它任何来自原始Observable的数据。</strong></p>
<p><img src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/S.BehaviorSubject.png" alt="BehaviorSubject示意图"></p>
<p>先上代码，试试水：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">BehaviorSubject&lt;String&gt; behaviorSubject = BehaviorSubject.create(<span class="string">"default"</span>);</span><br><span class="line"></span><br><span class="line">Subscriber&lt;String&gt; subscriber = <span class="keyword">new</span> Subscriber&lt;String&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Log.d(TAG, <span class="string">"onCompleted: BehaviorSubject Completed!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line">        Log.d(TAG, <span class="string">"onError: BehaviorSubject Error!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        Log.d(TAG, <span class="string">"onNext: "</span> + s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">behaviorSubject.subscribe(subscriber);</span><br><span class="line">behaviorSubject.onNext(<span class="string">"one"</span>);</span><br><span class="line">behaviorSubject.onNext(<span class="string">"two"</span>);</span><br><span class="line">behaviorSubject.onNext(<span class="string">"three"</span>);</span><br></pre></td></tr></table></figure></p>
<p>我们来看看结果：</p>
<pre><code>onNext: default
onNext: one
onNext: two
onNext: three
</code></pre><p>不是说好的，是最近发射的嘛！怎么全部都打印出来了？还有default哪儿冒出来的？</p>
<p>在我们创建BehaviorSubject的时候可以携带一个默认值：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BehaviorSubject&lt;String&gt; behaviorSubject = BehaviorSubject.create(<span class="string">"default"</span>);</span><br></pre></td></tr></table></figure>
<p>所以如果去掉上面最后三行代码，还是会打印一个default。</p>
<p>那为什么全部都打印出来了呢？<br>我们把上述代码做个改变：</p>
<pre><code>behaviorSubject.subscribe(subscriber);
</code></pre><p>放到倒数第2行，也就是：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">behaviorSubject.onNext(<span class="string">"one"</span>);</span><br><span class="line">behaviorSubject.onNext(<span class="string">"two"</span>);</span><br><span class="line">behaviorSubject.subscribe(subscriber);</span><br><span class="line">behaviorSubject.onNext(<span class="string">"three"</span>);</span><br></pre></td></tr></table></figure>
<p>欸嘿嘿，我们在来看看结果，变成什么了：</p>
<pre><code>onNext: two
onNext: three
</code></pre><p><strong>看到结果，我们不难看出，其实上面所说的发射最近所发射的数据，其实就是以</strong></p>
<pre><code>behaviorSubject.subscribe(subscriber);
</code></pre><p><strong>为界，这句代码之前的一个和之后的所以发射。</strong></p>
<p>不信你可以试试，将这句代码放到最后一行。看看是不是只有：</p>
<pre><code>onNext: three
</code></pre><hr>
<p>当然，如果原始的Observable因为发生了一个错误而终止，BehaviorSubject将不会发射任何数据，只是简单的向前传递这个错误通知。 </p>
<p><img src="https://mcxiaoke.gitbooks.io/rxdocs/content/images/S.BehaviorSubject.e.png" alt="BehaviorSubject异常示意图"></p>
<h4 id="ReplaySubject"><a href="#ReplaySubject" class="headerlink" title="ReplaySubject"></a>ReplaySubject</h4><p>那 ReplaySubject 又是什么呢？<br><strong>ReplaySubject会发射所有来自原始Observable的数据给观察者，无论它们是何时订阅的。</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">ReplaySubject&lt;String&gt; replaySubject = ReplaySubject.create();</span><br><span class="line"></span><br><span class="line">Subscriber&lt;String&gt; subscriber = <span class="keyword">new</span> Subscriber&lt;String&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Log.d(TAG, <span class="string">"onCompleted: ReplaySubject Completed!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line">        Log.d(TAG, <span class="string">"onError: ReplaySubject Error!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        Log.d(TAG, <span class="string">"onNext: "</span> + s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">replaySubject.subscribe(subscriber);</span><br><span class="line"></span><br><span class="line">replaySubject.onNext(<span class="string">"one"</span>);</span><br><span class="line">replaySubject.onNext(<span class="string">"two"</span>);</span><br><span class="line">replaySubject.onNext(<span class="string">"three"</span>);</span><br></pre></td></tr></table></figure>
<p>结果如下：</p>
<pre><code>onNext: one
onNext: two
onNext: three
</code></pre><p><img src="https://mcxiaoke.gitbooks.io/rxdocs/content/images/S.ReplaySubject.png" alt="ReplaySubject示意图"></p>
<p>这个跟BehaviorSubject的不同之处就是：<strong>不论在什么地方进行订阅，都不影响我发射全部数据。</strong></p>
<h4 id="PublishSubject"><a href="#PublishSubject" class="headerlink" title="PublishSubject"></a>PublishSubject</h4><p><strong>PublishSubject只会把在订阅发生的时间点之后来自原始Observable的数据发射给观察者。</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">PublishSubject&lt;String&gt; publishSubject = PublishSubject.create();</span><br><span class="line"></span><br><span class="line">Subscriber&lt;String&gt; subscriber = <span class="keyword">new</span> Subscriber&lt;String&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Log.d(TAG, <span class="string">"onCompleted: PublishSubject Completed!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line">        Log.d(TAG, <span class="string">"onError: PublishSubject Error!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        Log.d(TAG, <span class="string">"onNext: "</span> + s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">publishSubject.onNext(<span class="string">"one"</span>);</span><br><span class="line">publishSubject.onNext(<span class="string">"two"</span>);</span><br><span class="line">publishSubject.subscribe(subscriber);</span><br><span class="line">publishSubject.onNext(<span class="string">"three"</span>);</span><br></pre></td></tr></table></figure>
<p>结果如下：</p>
<pre><code>onNext: three
</code></pre><p>其实这个已经很形象的说明了，<strong>从订阅开始之前的数据都将不会被发射，而只有订阅之后的数据才会被发射出去。</strong></p>
<p><img src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/S.PublishSubject.png" alt="PublishSubject示意图"></p>
<p>最后在总结一下<strong>Subject</strong>几种类型的区别：</p>
<p><strong>ReplaySubject：不论订阅所处任何位置，都将发射全部数据</strong><br><strong>AsyncSubject：不论订阅所处任何位置，只会发射最后一个数据</strong><br><strong>BehaviorSubject：订阅之前的一个和订阅之后的全部数据被发射</strong><br><strong>PublishSubject：订阅之后的数据全部被发射。</strong>   </p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Rx系列之RxJava操作符]]></title>
      <url>http://yoursite.com/2016/07/28/Rx%E7%B3%BB%E5%88%97%E4%B9%8BRxJava%E6%93%8D%E4%BD%9C%E7%AC%A6/</url>
      <content type="html"><![CDATA[<h1 id="Rx系列之RxJava操作符"><a href="#Rx系列之RxJava操作符" class="headerlink" title="Rx系列之RxJava操作符"></a>Rx系列之RxJava操作符</h1><p>在前面一章节中，讲解了Rxjava的基本的组成，他们之间的关系，这一章，主要让大家了解一下在RxJava中的操作符。但是在这之前，我们还得先了解一下 Scheduler(调度器) </p>
<h3 id="Scheduler-调度器"><a href="#Scheduler-调度器" class="headerlink" title="Scheduler(调度器)"></a>Scheduler(调度器)</h3><p>在上一章节，我们讲到了，Rxjava的就是<strong>异步</strong>。<br>那么如何让他进行异步呢？这就要用到我们的调度器了。<br>先看看RxJava中调度器支持哪几种调度：</p>
<table>
<thead>
<tr>
<th style="text-align:center">调度器类型</th>
<th style="text-align:center">效果</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">Schedulers.computation( )</td>
<td style="text-align:center">用于计算任务，如事件循环或和回调处理，不要用于IO操作(IO操作请使用Schedulers.io())；默认线程数等于处理器的数量</td>
</tr>
<tr>
<td style="text-align:center">Schedulers.from(executor)</td>
<td style="text-align:center">使用指定的Executor作为调度器</td>
</tr>
<tr>
<td style="text-align:center">Schedulers.immediate( )</td>
<td style="text-align:center">在当前线程立即开始执行任务</td>
</tr>
<tr>
<td style="text-align:center">Schedulers.io( )</td>
<td style="text-align:center">用于IO密集型任务，如异步阻塞IO操作，这个调度器的线程池会根据需要增长；对于普通的计算任务，请使用Schedulers.computation()；Schedulers.io( )默认是一个CachedThreadScheduler，很像一个有线程缓存的新线程调度器</td>
</tr>
<tr>
<td style="text-align:center">Schedulers.newThread( )</td>
<td style="text-align:center">为每个任务创建一个新线程</td>
</tr>
<tr>
<td style="text-align:center">Schedulers.trampoline( )</td>
<td style="text-align:center">当其它排队的任务完成后，在当前线程排队开始执行</td>
</tr>
</tbody>
</table>
<p>有了上述所说的几种调度之后，就可以调用subscribeOn()和observeOn()来对线程进行调度了。<br><strong>subscribeOn()指定：Observable将全部的处理过程（包括发射数据和通知）放在特定的调度器上执行。</strong><br><strong>ObserveOn()指定：一个Observable在一个特定的调度器上调用观察者的onNext, onError和onCompleted方法，</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">Subscriber subcriber = <span class="keyword">new</span> Subscriber&lt;String&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Log.d(TAG, <span class="string">"onCompleted: Completed!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line">        Log.d(TAG, <span class="string">"onError: Error!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        Log.d(TAG, <span class="string">"onNext: "</span> + s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Observable.just(<span class="string">"1"</span>, <span class="string">"2"</span>, <span class="string">"3"</span>, <span class="string">"4"</span>)</span><br><span class="line">        .subscribeOn(Schedulers.io())</span><br><span class="line">        .observeOn(AndroidSchedulers.mainThread())</span><br><span class="line">        .subscribe(subcriber);</span><br></pre></td></tr></table></figure>
<p><strong>上面这段代码中，由于指定了1，2，3，4发射代码为Schedulers.io()，那么发射数据就将在io线程中执行。而onNext, onError和onCompleted则将在主线中执行。</strong></p>
<h3 id="Operators-操作符"><a href="#Operators-操作符" class="headerlink" title="Operators(操作符)"></a>Operators(操作符)</h3><h4 id="map家族"><a href="#map家族" class="headerlink" title="map家族"></a>map家族</h4><p>RxJava提供了几个mapping函数：map(),flatMap(),concatMap(),flatMapIterable()以及switchMap().所有这些函数都作用于一个可观测序列，然后变换它发射的值，最后用一种新的形式返回它们。</p>
<h5 id="map"><a href="#map" class="headerlink" title="map"></a>map</h5><p>map 是用于变换的一个操作符，这在RxJava中占据了一定的地位，就是因为它的变换操作。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">Subscriber subcriber = <span class="keyword">new</span> Subscriber&lt;Integer&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Log.d(TAG, <span class="string">"onCompleted: Completed!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line">        Log.d(TAG, <span class="string">"onError: Error!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Integer integer)</span> </span>&#123;</span><br><span class="line">        Log.d(TAG, <span class="string">"onNext: "</span> + integer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Observable.just(<span class="string">"1"</span>, <span class="string">"2"</span>, <span class="string">"3"</span>, <span class="string">"4"</span>)</span><br><span class="line">        .subscribeOn(Schedulers.io())</span><br><span class="line">        .observeOn(AndroidSchedulers.mainThread())</span><br><span class="line">        .map(<span class="keyword">new</span> Func1&lt;String, Integer&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Integer <span class="title">call</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> Integer.parseInt(s);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        .subscribe(subcriber);</span><br></pre></td></tr></table></figure>
<p>在上面的代码中，我通过map将字符串转化成了整形的1，2，3，4，返回一个Observable的对象。<br><strong>请注意：这个操作符默认不在任何特定的调度器上执行。</strong>   </p>
<h5 id="flatmap"><a href="#flatmap" class="headerlink" title="flatmap"></a>flatmap</h5><p>flatmap对于新入门的来说，理解起来确实有一定的难度，可以先看一个简单的栗子：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">Subscriber subcriber = <span class="keyword">new</span> Subscriber&lt;Integer&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Log.d(TAG, <span class="string">"onCompleted: Completed!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line">        Log.d(TAG, <span class="string">"onError: Error!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Integer integer)</span> </span>&#123;</span><br><span class="line">        Log.d(TAG, <span class="string">"onNext: "</span> + integer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Observable.just(<span class="string">"1"</span>, <span class="string">"2"</span>, <span class="string">"3"</span>, <span class="string">"4"</span>)</span><br><span class="line">        .subscribeOn(Schedulers.io())</span><br><span class="line">        .observeOn(AndroidSchedulers.mainThread())</span><br><span class="line">        .flatMap(<span class="keyword">new</span> Func1&lt;String, Observable&lt;Integer&gt;&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Observable&lt;Integer&gt; <span class="title">call</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> Observable.just(Integer.parseInt(s)+<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        .subscribe(subcriber);</span><br></pre></td></tr></table></figure>
<p>从上面我们可以看出，<strong>map与flatmap很相似，都是用的Func1，而且模式都是<i,o>模式，即是：I转换成O并返回。但是最大的不同点在于：我们flatmap的输出类型是Observable的类型。<br>在这里请注意一个问题：在执行flatmap中返回之后(O输出返回的Observable)，并不是立马把返回的Observable通过Subscribe进行订阅，而是将返回的若干Observables都交给同一个Observable，然后再进行subscribe。</i,o></strong></p>
<p>所以，在上面我们先将字符串”1”,”2”, “3”, “4” 分别转换成一个整形的Observable类型，即是：Observable(2),Observable(3),Observable(4),Observable(5)。然后将这些个Observables统一转换成一个Observable，再进行subscribe。看一下结果：</p>
<pre><code>onNext: 2
onNext: 3
onNext: 4
onNext: 5
onCompleted: Completed!
</code></pre><p><strong>那么，这个flatmap到底有何用呢？可以用在什么地方呢？</strong>   </p>
<p>假设这样一种情景：一个学校的老师我们定义为一个集合A，每个老师包括了个人信息和所教课程，一个老师不可能只教授一门课程，所以我们将老师所教授课程定义为集合B。如果让你打印每个老师所教课程，该怎么做？</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Teacher[] teachers = ...;</span><br><span class="line">Subscriber&lt;Course&gt; subscriber = <span class="keyword">new</span> Subscriber&lt;Course&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Course course)</span> </span>&#123;</span><br><span class="line">        Log.d(tag, course.getName());</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;;</span><br><span class="line">Observable.from(teachers)</span><br><span class="line">    .flatMap(<span class="keyword">new</span> Func1&lt;Teacher, Observable&lt;Course&gt;&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Observable&lt;Course&gt; <span class="title">call</span><span class="params">(Teacher teacher)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> Observable.from(teacher.getCourses());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    .subscribe(subscriber);</span><br></pre></td></tr></table></figure>
<p><strong>最后再补充一点：FlatMap对这些Observables发射的数据做的是合并(merge)操作，因此它们可能是交错的。这意味着flatMap()函数在最后的Observable中不能够保证源Observables确切的发射顺序。</strong></p>
<h5 id="ConcatMap"><a href="#ConcatMap" class="headerlink" title="ConcatMap"></a>ConcatMap</h5><p>RxJava的concatMap()函数解决了flatMap()的交叉问题，提供了一种能够把发射的值连续在一起的铺平函数，而不是合并它们，如下图所示：<br><img src="https://github.com/yuxingxin/RxJava-Essentials-CN/raw/master/images/chapter5_3.png" alt="ConcatMap示意图"><br>变换的操作符还有很多：buffer,Scan…等等，大家可以研究一下。</p>
<h4 id="其他操作符"><a href="#其他操作符" class="headerlink" title="其他操作符"></a>其他操作符</h4><h4 id="repeat"><a href="#repeat" class="headerlink" title="repeat"></a>repeat</h4><p><strong>让你发射的数据重复发射</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Subscriber subcriber = <span class="keyword">new</span> Subscriber&lt;Integer&gt;() &#123;</span><br><span class="line">    ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Observable.just(<span class="string">"1"</span>, <span class="string">"2"</span>,<span class="string">"3"</span>)</span><br><span class="line">        .subscribeOn(Schedulers.io())</span><br><span class="line">        .observeOn(AndroidSchedulers.mainThread())</span><br><span class="line">        .flatMap(<span class="keyword">new</span> Func1&lt;String, Observable&lt;Integer&gt;&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Observable&lt;Integer&gt; <span class="title">call</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> Observable.just(Integer.parseInt(s)+<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        .repeat(<span class="number">3</span>)</span><br><span class="line">        .subscribe(subcriber);</span><br></pre></td></tr></table></figure>
<p>看一下结果：</p>
<pre><code>onNext: 2
onNext: 3
onNext: 4
onNext: 2
onNext: 3
onNext: 4
onNext: 2
onNext: 3
onNext: 4
onCompleted: Completed!
</code></pre><h5 id="range"><a href="#range" class="headerlink" title="range"></a>range</h5><p><strong>从起始点开始发射数据</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Subscriber subcriber = <span class="keyword">new</span> Subscriber&lt;Integer&gt;() &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Observable.range(<span class="number">10</span>,<span class="number">3</span>)</span><br><span class="line">        .subscribeOn(Schedulers.io())</span><br><span class="line">        .observeOn(AndroidSchedulers.mainThread())</span><br><span class="line">        .subscribe(subcriber);</span><br></pre></td></tr></table></figure>
<p>结果为：10，11，12。range(10,3),其中10 是起始，3是数量。</p>
<h5 id="interval"><a href="#interval" class="headerlink" title="interval"></a>interval</h5><p><strong>在需要轮询的时候是最好的选择</strong></p>
<pre><code>Observable.interval(3,TimeUnit.SECONDS)
        .subscribe(new Observer&lt;Long&gt;() {
            @Override
            public void onCompleted() {
            ...
        });
</code></pre><p>interval()函数的两个参数：一个指定两次发射的时间间隔，另一个是用到的时间单位。</p>
<h5 id="take"><a href="#take" class="headerlink" title="take"></a>take</h5><pre><code>Observable.just(1, 2, 3, 4, 5, 6, 7, 8)
          .take(4)
          .subscribe(new Subscriber&lt;Integer&gt;() {
        ...
    });
</code></pre><p>输出</p>
<pre><code>Next: 1
Next: 2
Next: 3
Next: 4
Sequence complete.
</code></pre><h5 id="TakeLast"><a href="#TakeLast" class="headerlink" title="TakeLast"></a>TakeLast</h5><p><strong>如果我们想要最后N个元素，我们只需使用takeLast()函数：</strong></p>
<pre><code>Observable.just(1, 2, 3, 4, 5, 6, 7, 8)
              .takelast(2)
              .subscribe(new Subscriber&lt;Integer&gt;() {
            ...
        });
</code></pre><p>输出</p>
<pre><code>Next: 7
Next: 8
Sequence complete.
</code></pre><p><a href="https://mcxiaoke.gitbooks.io/rxdocs/content/Operators.html" target="_blank" rel="external">戳我</a>可以查看更多的操作符的用法。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Git Command]]></title>
      <url>http://yoursite.com/2016/05/18/2016-05-16-git/</url>
      <content type="html"><![CDATA[<h1 id="git常用命令"><a href="#git常用命令" class="headerlink" title="git常用命令"></a>git常用命令</h1><h2 id="将远程的git仓库关联到本地"><a href="#将远程的git仓库关联到本地" class="headerlink" title="将远程的git仓库关联到本地"></a>将远程的git仓库关联到本地</h2><ul>
<li>首先我们需要在远程(github)仓库创建一个仓库，这里的测试仓库是base_project</li>
<li>就需要将远程的仓库和本地关联<br>  a. 需要在本地创建一个和服务器一样的文件夹（base_project）<br>  b. 在这个文件夹下打开git命令窗口<br>  c. 初始化git ： </li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">    $ git init</span><br><span class="line">    Initialized empty Git repository in D:/android project/test/base_project/.git/</span><br><span class="line"></span><br><span class="line">    <span class="number">10142</span><span class="meta">@DESKTOP</span>-<span class="number">21</span>D76NU MINGW64 /d/android project/test/base_project (master)</span><br><span class="line"></span><br><span class="line">~~~     </span><br><span class="line"></span><br><span class="line">我们能够发现在当前目录下多了一个.git的目录，这个目录是Git来跟踪管理版本库的，千万不要手动修改这个目录里面的文件，不然改乱了，就把Git仓库给破坏了。       </span><br><span class="line">    d. 将本地的仓库和远程的仓库进行关联     </span><br><span class="line"></span><br><span class="line">~~~java</span><br><span class="line">    <span class="number">10142</span><span class="meta">@DESKTOP</span>-<span class="number">21</span>D76NU MINGW64 /d/android project/test/base_project (master)</span><br><span class="line">    $ git remote add origin https:<span class="comment">//github.com/lipengfeng/base_project.git</span></span><br></pre></td></tr></table></figure>
<p>这时将可以查看远程仓库了 </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote -v</span><br></pre></td></tr></table></figure>
<p><strong>备注</strong>:<strong>origin</strong>就是我们的远程库的名字，这是Git默认的叫法，也可以改成别的;<br><strong><a href="https://github.com/lipengfeng/base_project.git" target="_blank" rel="external">https://github.com/lipengfeng/base_project.git</a></strong>是我们远程仓库的路径(这里我们使用的github)</p>
<h2 id="创建文件并提交到远程仓库"><a href="#创建文件并提交到远程仓库" class="headerlink" title="创建文件并提交到远程仓库"></a>创建文件并提交到远程仓库</h2><ul>
<li><p>这样我们就可以开始在本地的文件夹中做事了,这里我们先创建一个MainActivity.java文件</p>
</li>
<li><p>创建文件 </p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touch MainActivity.java</span><br></pre></td></tr></table></figure>
<ul>
<li>将文件添加到本地仓库       </li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add MainActivity.java</span><br></pre></td></tr></table></figure>
<ul>
<li>将文件提交到本地缓存区</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m <span class="string">"书写提交信息"</span></span><br></pre></td></tr></table></figure>
<ul>
<li>将文件推送到远程</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push -<span class="function">u origin <span class="title">master</span><span class="params">(分支)</span></span></span><br></pre></td></tr></table></figure>
<ul>
<li>将远程的文件下拉到本地</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull origin master</span><br></pre></td></tr></table></figure>
<p>注意如果想添加不同目录下的文件：那么我们要修改目录</p>
<ul>
<li>添加不同路径的文件（<strong>ps:其他的保持不变就可以将其提交上去</strong>）</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add read/read.txt</span><br></pre></td></tr></table></figure>
<h2 id="分支-branch-操作相关命令"><a href="#分支-branch-操作相关命令" class="headerlink" title="分支(branch)操作相关命令"></a>分支(branch)操作相关命令</h2><ul>
<li>查看本地分支</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">git branch</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 举个例子 下面就是返回了一个master分支</span><br><span class="line">10142@DESKTOP-21D76NU MINGW64 /d/android project/test/base_project (master)</span><br><span class="line">$ git branch</span><br><span class="line">master</span><br><span class="line"></span><br><span class="line">*/</span></span><br></pre></td></tr></table></figure>
<ul>
<li>查看远程分支  </li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">    git branch -r</span><br><span class="line"><span class="comment">/*</span><br><span class="line">    git branch -r</span><br><span class="line">    origin/master</span><br><span class="line">*/</span></span><br></pre></td></tr></table></figure>
<p><em>创建本地分支（<em>*ps:该命令创建本地分支后并不会切换到该分支</em></em>）</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git branch dev[分支名]</span><br><span class="line"><span class="comment">/* 我们可以看到当前的分支已经有两个了</span><br><span class="line">$ git branch</span><br><span class="line">dev</span><br><span class="line">master</span><br><span class="line">*/</span></span><br></pre></td></tr></table></figure>
<ul>
<li>切换分支<br>在切换分支之前，先查看一下当前处于哪个分支？</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 可以看到当前仍然处于 master分支上</span><br><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line">Your branch is up-to-date with 'origin/master'.</span><br><span class="line">nothing to commit, working directory clean</span><br><span class="line"></span><br><span class="line">*/</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">git checkout dev[分支名]</span><br><span class="line"><span class="comment">/* 我们可以看到，当执行切换分支的命令之后，就会将分支切换到另一个分支</span><br><span class="line"></span><br><span class="line">$ git checkout dev</span><br><span class="line">Switched to branch 'dev'</span><br><span class="line">$ git status</span><br><span class="line">On branch dev</span><br><span class="line">nothing to commit, working directory clean</span><br><span class="line"></span><br><span class="line">*/</span></span><br></pre></td></tr></table></figure>
<ul>
<li>创建分支并立即切换到新分支</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">    git </span><br><span class="line">    $ git checkout -b other[分支名]</span><br><span class="line">    Switched to a <span class="keyword">new</span> branch <span class="string">'other'</span></span><br><span class="line">~~~     </span><br><span class="line"></span><br><span class="line">* 删除分支</span><br><span class="line"></span><br><span class="line">~~~java</span><br><span class="line">    git branch -d other[分支名]</span><br><span class="line">    <span class="comment">/* 可以看到这里报错了，这是因为， 删除的时候我们需要</span><br><span class="line">    切换到其他分支才能删除该分支</span><br><span class="line">    $ git branch -d other</span><br><span class="line">    error: Cannot delete the branch 'other' which you are currently on.</span><br><span class="line">    $ git checkout dev</span><br><span class="line">    Switched to branch 'dev'</span><br><span class="line"></span><br><span class="line">    $ git branch -d other</span><br><span class="line">    Deleted branch other (was 0e7e027).</span><br><span class="line"></span><br><span class="line">*/</span></span><br></pre></td></tr></table></figure>
<ul>
<li>本地分支push到远程</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">    git push origin dev[分支名]</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span><br><span class="line">    $ git push origin dev</span><br><span class="line">    Total 0 (delta 0), reused 0 (delta 0)</span><br><span class="line">    git To https://github.com/lipengfeng/base_project.git</span><br><span class="line">    * [new branch]      </span><br><span class="line">    dev -&gt; dev</span><br><span class="line">*/</span></span><br></pre></td></tr></table></figure>
<ul>
<li>删除远程分支</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin:heads/dev 或者 git push origin:dev</span><br></pre></td></tr></table></figure>
<ul>
<li>合并分支</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git merge dev -----将名为dev的分支与当前分支合并</span><br><span class="line">$ git merge dev</span><br><span class="line">Already up-to-date.</span><br></pre></td></tr></table></figure>
<h2 id="git-远程仓库管理"><a href="#git-远程仓库管理" class="headerlink" title="git 远程仓库管理"></a>git 远程仓库管理</h2><ul>
<li>查看远程服务地址和名称</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">    git remote -v <span class="comment">//查看远程服务地址和仓库名称</span></span><br><span class="line">    <span class="comment">/*</span><br><span class="line">    $ git remote -v</span><br><span class="line">    origin  https://github.com/lipengfeng/base_project.git (fetch)</span><br><span class="line">    origin  https://github.com/lipengfeng/base_project.git (push)</span><br><span class="line">*/</span></span><br></pre></td></tr></table></figure>
<ul>
<li>查看远程服务器仓库状态</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$ git remote show origin</span><br><span class="line"><span class="comment">/*</span><br><span class="line">* remote origin</span><br><span class="line">  Fetch URL: https://github.com/lipengfeng/base_project.git</span><br><span class="line">  Push  URL: https://github.com/lipengfeng/base_project.git</span><br><span class="line">  HEAD branch: master</span><br><span class="line">  Remote branches:</span><br><span class="line">    dev    tracked</span><br><span class="line">    master tracked</span><br><span class="line">  Local branch configured for 'git pull':</span><br><span class="line">    master merges with remote master</span><br><span class="line">  Local refs configured for 'git push':</span><br><span class="line">    dev    pushes to dev    (up to date)</span><br><span class="line">    master pushes to master (up to date)</span><br><span class="line">*/</span></span><br></pre></td></tr></table></figure>
<ul>
<li>克隆远程仓库到本地</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git clone https:<span class="comment">//github.com/lipengfeng/base_project.git</span></span><br><span class="line"></span><br><span class="line">$ git clone &lt;版本库的网址&gt; &lt;本地目录名&gt;</span><br><span class="line"><span class="comment">/*该命令会在本地主机生成一个目录，与远程主机的版本库同名。如果要指定不同的目录名，可以将目录名作为git clone命令的第二个参数。*/</span></span><br></pre></td></tr></table></figure>
<ul>
<li>添加远程仓库地址</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin git@ github:robbin/robbin_site.git</span><br><span class="line"><span class="comment">//这一点在关联远程仓库的时候已经说过了，所以这里不再赘述</span></span><br></pre></td></tr></table></figure>
<ul>
<li>修改远程仓库地址</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git remote set-url origin git@ github.com:robbin/robbin_site.git </span><br><span class="line"><span class="comment">//设置远程仓库地址(用于修改远程仓库地址)</span></span><br></pre></td></tr></table></figure>
<ul>
<li>删除远程仓库</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote rm &lt;repository&gt;</span><br></pre></td></tr></table></figure>
<h2 id="git暂存管理"><a href="#git暂存管理" class="headerlink" title="git暂存管理"></a>git暂存管理</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git stash                        # 暂存  </span><br><span class="line">git stash list                   # 列所有stash  </span><br><span class="line">git stash apply                  # 恢复暂存的内容  </span><br><span class="line">git stash drop                   # 删除暂存区</span><br></pre></td></tr></table></figure>
<h2 id="其他一些命令"><a href="#其他一些命令" class="headerlink" title="其他一些命令"></a>其他一些命令</h2><p><strong>git log:</strong>查看历史日志<br><strong>git rm:</strong>从当前工作空间/索引中删除文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rm app/model/user.rb</span><br></pre></td></tr></table></figure>
<p><strong>git revert:</strong>git revert：还原一个版本的修改，必须提供一个具体的Git版本号，Git的版本号都是生成的一个哈希值</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git revert bbaf6fb5060b4875b18ff9ff637ce118256d6f20</span><br></pre></td></tr></table></figure>
<p><strong>git checkout</strong>：Git的checkout有两个作用，其一是在不同的branch之间进行切换，例如’git checkout new_branch’就会切换到new_branch的分支上去；另一个功能是还原代码的作用，例如’git checkout app/model/user.rb’就会将user.rb文件从上一个已提交的版本中更新回来，<br>未提交的内容全部会回滚<br><strong>git rebase:</strong>用下面两幅图解释会比较清楚一些，rebase命令执行后，实际上是将分支点从C移到了G，这样分支也就具有了从C到G的功能<br><img src="http://my.csdn.net/uploads/201205/02/1335955913_5248.png" alt=""></p>
]]></content>
    </entry>
    
  
  
</search>
